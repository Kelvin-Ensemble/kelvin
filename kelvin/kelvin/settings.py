"""
Django settings for kelvin project.

Generated by 'django-admin startproject' using Django 1.11.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import os, sys
from dotenv import load_dotenv

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.dirname(PROJECT_DIR)

# Environment Variables (load .env) - If no .env file found, find .env file on pythonanywhere, or contact previous webmaster.
dotenv_file = os.path.join(BASE_DIR, ".env")
load_dotenv(dotenv_file)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]
COOKIE_DATA = {}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["127.0.0.1", ".kelvin-ensemble.co.uk", "yukisuter.pythonanywhere.com"]

# Application definition
INSTALLED_APPS = [
    "kelvin",
    "website",
    "website.apps.CustomConstance",
    'constance.backends.database',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'import_export'
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "kelvin.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(PROJECT_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "kelvin.wsgi.application"

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Media Files

MEDIA_ROOT = os.path.join(BASE_DIR, "media")
MEDIA_URL = "/media/"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'website/static')
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "DEBUG",
            "class": "logging.FileHandler",
            "filename": "debug.log",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Constance Configuration
CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'
CONSTANCE_DBS = ['default']

CONSTANCE_CONFIG = {
    'Concert_Page_Status': ('-----', 'Select status for the concert page', 'concert_page_select'),
    'Concert_Series_Name': ('', 'The name of the concert series, usually "Spring/Autumn 20XX".'),
    'Concert_Series_Headliner': ('', 'The bold text that goes below the subtitle.'),
    'Concert_List': ('', 'The list of concerts dates.'),
    'Concert_Location': ('', 'The concert location.'),
    'Concert_Poster': ('', 'Concert poster.', 'image_field'),
    'Concert_Programme': ('', 'Concert programme.'),
    'Concert_Playlist': ('', 'Repetoire spotify playlist.')
}

CONSTANCE_CONFIG_FIELDSETS = {
    'Concert Series Options': ('Concert_Page_Status','Concert_Series_Name', 'Concert_Series_Headliner', 'Concert_List', 'Concert_Location', 'Concert_Poster', 'Concert_Programme', 'Concert_Playlist')
}

CONSTANCE_ADDITIONAL_FIELDS = {
    'concert_page_select': ['django.forms.fields.ChoiceField', {
        'widget': 'django.forms.Select',
        'choices': (("-----", "-----"), ("upcoming", "Upcoming"), ("info_only", "Information Only"), ("for_sale", "For Sale"), ("sold_out", "Sold Out"), ("over", "Over"))
    }],
    'image_field': ['django.forms.ImageField', {}],
}